name: Deploy SmartProBono

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy Frontend and Backend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: 'backend/requirements.txt'
          
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
          
      - name: Build frontend
        env:
          REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
        run: |
          cd frontend
          npm run build
          
      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          
      - name: Setup Cloudinary
        run: |
          cd backend
          python scripts/setup_cloudinary.py --test-only
          
      - name: Run database migrations
        run: |
          cd backend
          python -m flask db upgrade
          
      - name: Deploy to Netlify (Frontend)
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        run: |
          npm install -g netlify-cli
          cd frontend
          netlify deploy --prod --dir=build
          
      - name: Deploy to Render (Backend)
        if: success()
        env:
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          curl -X POST "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{"clearCache": "clear"}'
            
      - name: Notify successful deployment
        if: success()
        uses: slackapi/slack-github-action@v1.22.0
        with:
          channel-id: 'deployments'
          slack-message: "Deployment of SmartProBono was successful! ðŸŽ‰"
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: GitHub Actions
          
      - name: Notify failed deployment
        if: failure()
        uses: slackapi/slack-github-action@v1.22.0
        with:
          channel-id: 'deployments'
          slack-message: "Deployment of SmartProBono failed! ðŸš¨ Check the logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: GitHub Actions 