name: Cloudinary Setup & Management

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/services/cloudinary_service.py'
      - 'backend/config/cloudinary_config.py'
      - 'hybrid_storage_demo/**'
      - 'backend/scripts/setup_cloudinary.py'
  workflow_dispatch:

jobs:
  cloudinary-setup:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install cloudinary python-dotenv requests
    
    - name: Configure Cloudinary Environment
      env:
        CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
        CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
        CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
      run: |
        echo "CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}" > backend/.env
        echo "CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}" >> backend/.env
        echo "CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}" >> backend/.env
    
    - name: Create scripts directory
      run: |
        mkdir -p backend/scripts
        touch backend/scripts/__init__.py
    
    - name: Create setup script
      run: |
        cat > backend/scripts/setup_cloudinary.py << 'EOF'
        #!/usr/bin/env python
        import argparse
        import os
        import sys
        import cloudinary
        import cloudinary.api
        from dotenv import load_dotenv

        def main():
            parser = argparse.ArgumentParser(description='Setup Cloudinary')
            parser.add_argument('--test-only', action='store_true')
            args = parser.parse_args()
            
            load_dotenv('../.env')
            
            # Configure Cloudinary
            cloudinary.config(
                cloud_name=os.getenv('CLOUDINARY_CLOUD_NAME'),
                api_key=os.getenv('CLOUDINARY_API_KEY'),
                api_secret=os.getenv('CLOUDINARY_API_SECRET')
            )
            
            # Test connection
            try:
                result = cloudinary.api.ping()
                print(f"Cloudinary connection successful: {result}")
                
                if args.test_only:
                    sys.exit(0)
                    
                # Create folders
                folders = ['smartprobono/case_documents', 'smartprobono/document_templates', 'smartprobono/user_uploads']
                for folder in folders:
                    print(f"Creating folder: {folder}")
                    try:
                        cloudinary.api.create_folder(folder)
                    except Exception as e:
                        print(f"Folder may already exist: {e}")
                
                # Create presets
                presets = {
                    'document_uploads': {
                        'folder': 'smartprobono/case_documents',
                        'allowed_formats': ['pdf', 'doc', 'docx'],
                        'resource_type': 'raw',
                        'unsigned': True
                    },
                    'template_uploads': {
                        'folder': 'smartprobono/document_templates',
                        'allowed_formats': ['doc', 'docx', 'txt', 'html'],
                        'resource_type': 'raw',
                        'unsigned': True
                    },
                    'user_uploads': {
                        'folder': 'smartprobono/user_uploads',
                        'allowed_formats': ['pdf', 'doc', 'docx', 'jpg', 'jpeg', 'png'],
                        'resource_type': 'auto',
                        'unsigned': True
                    }
                }
                
                for name, config in presets.items():
                    print(f"Setting up preset: {name}")
                    try:
                        cloudinary.api.create_upload_preset(name=name, **config)
                    except Exception as e:
                        print(f"Updating preset: {e}")
                        cloudinary.api.update_upload_preset(name=name, **config)
                
                print("Setup completed successfully")
                
            except Exception as e:
                print(f"Error: {e}")
                sys.exit(1)

        if __name__ == "__main__":
            main()
        EOF
        
        chmod +x backend/scripts/setup_cloudinary.py
        ls -la backend/scripts/
    
    - name: Validate Cloudinary Configuration
      run: |
        cd backend
        python scripts/setup_cloudinary.py --test-only
    
    - name: Setup Cloudinary Folders and Presets
      if: success()
      run: |
        cd backend
        python scripts/setup_cloudinary.py
    
    - name: Cleanup
      if: always()
      run: |
        rm -f backend/.env 
