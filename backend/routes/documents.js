const express = require('express');
const router = express.Router();
const { createLogger } = require('../utils/logger');
const pdfService = require('../services/pdfService');
const security = require('../middleware/security');
const { validateDocument } = require('../middleware/validation');

const logger = createLogger('documents-route');

// Get list of available document templates
router.get('/templates', async (req, res) => {
  try {
    const templates = await pdfService.getAvailableTemplates();
    res.json({ templates });
  } catch (error) {
    logger.error('Error fetching templates:', error);
    res.status(500).json({ error: 'Failed to fetch document templates' });
  }
});

// Generate a document from template
router.post('/generate/:templateName', 
  security.documentAccessControl,
  validateDocument,
  async (req, res) => {
    try {
      const { templateName } = req.params;
      const documentData = req.body;
      
      // Add metadata
      documentData.generated_by = req.user.id;
      documentData.generated_at = new Date().toISOString();
      
      // Generate document with options
      const result = await pdfService.generateLegalDocument(templateName, documentData, {
        letterhead: {
          companyName: 'SmartProBono Legal Services',
          address: '123 Legal Street, Suite 100\nLegal City, ST 12345',
          contact: 'Phone: (555) 123-4567\nEmail: legal@smartprobono.com'
        },
        watermark: process.env.NODE_ENV === 'development' ? 'DRAFT' : undefined,
        encrypt: true,
        header: 'CONFIDENTIAL LEGAL DOCUMENT',
        footer: `Generated by SmartProBono on ${new Date().toLocaleDateString()}`
      });
      
      // Log document generation
      logger.info({
        action: 'document_generated',
        template: templateName,
        user: req.user.id,
        documentId: result.filename
      });
      
      res.json({
        success: true,
        document: {
          id: result.filename,
          path: `/documents/download/${result.filename}`,
          size: result.size,
          generated: documentData.generated_at
        }
      });
    } catch (error) {
      logger.error('Error generating document:', error);
      res.status(500).json({ 
        error: 'Failed to generate document',
        details: process.env.NODE_ENV === 'development' ? error.message : undefined
      });
    }
});

// Download generated document
router.get('/download/:filename',
  security.documentAccessControl,
  async (req, res) => {
    try {
      const { filename } = req.params;
      const filePath = await pdfService.getDocumentPath(filename);
      
      // Log document access
      logger.info({
        action: 'document_downloaded',
        filename,
        user: req.user.id
      });
      
      res.download(filePath, filename, (err) => {
        if (err) {
          logger.error('Error downloading document:', err);
          if (!res.headersSent) {
            res.status(500).json({ error: 'Failed to download document' });
          }
        }
      });
    } catch (error) {
      logger.error('Error accessing document:', error);
      res.status(404).json({ error: 'Document not found' });
    }
});

// Delete generated document
router.delete('/:filename',
  security.documentAccessControl,
  async (req, res) => {
    try {
      const { filename } = req.params;
      await pdfService.deleteDocument(filename);
      
      // Log document deletion
      logger.info({
        action: 'document_deleted',
        filename,
        user: req.user.id
      });
      
      res.json({ success: true });
    } catch (error) {
      logger.error('Error deleting document:', error);
      res.status(500).json({ error: 'Failed to delete document' });
    }
});

// Get document metadata
router.get('/metadata/:filename',
  security.documentAccessControl,
  async (req, res) => {
    try {
      const { filename } = req.params;
      const metadata = await pdfService.getDocumentMetadata(filename);
      res.json(metadata);
    } catch (error) {
      logger.error('Error fetching document metadata:', error);
      res.status(404).json({ error: 'Document metadata not found' });
    }
});

// Validate document data before generation
router.post('/validate/:templateName', async (req, res) => {
  try {
    const { templateName } = req.params;
    const documentData = req.body;
    
    const validationResult = await pdfService.validateDocumentData(templateName, documentData);
    
    if (validationResult.valid) {
      res.json({ valid: true });
    } else {
      res.status(400).json({
        valid: false,
        errors: validationResult.errors
      });
    }
  } catch (error) {
    logger.error('Error validating document data:', error);
    res.status(500).json({ error: 'Failed to validate document data' });
  }
});

module.exports = router; 