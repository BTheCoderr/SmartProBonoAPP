import React from 'react';
import { 
  Button, 
  Dialog, 
  DialogTitle, 
  DialogContent, 
  DialogActions,
  TextField,
  Grid,
  Typography
} from '@mui/material';
import DownloadIcon from '@mui/icons-material/Download';
import PrintIcon from '@mui/icons-material/Print';

function DocumentGenerator({ open, onClose, content, type }) {
  const [formData, setFormData] = React.useState({
    name: '',
    date: new Date().toISOString().split('T')[0],
    address: '',
    signature: ''
  });

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  const handlePrint = () => {
    const printWindow = window.open('', '_blank');
    printWindow.document.write(`
      <html>
        <head>
          <title>Legal Document</title>
          <style>
            body { font-family: Arial, sans-serif; padding: 20px; }
            .header { text-align: center; margin-bottom: 30px; }
            .content { line-height: 1.6; }
            .signature { margin-top: 50px; }
            .footer { margin-top: 30px; font-size: 12px; }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>${type} Document</h1>
          </div>
          <div class="content">
            ${content}
          </div>
          <div class="signature">
            <p>Name: ${formData.name}</p>
            <p>Date: ${formData.date}</p>
            <p>Address: ${formData.address}</p>
            <p>Signature: _____________________</p>
          </div>
          <div class="footer">
            <p>Generated by SmartProBono Legal Assistant</p>
          </div>
        </body>
      </html>
    `);
    printWindow.document.close();
    printWindow.print();
  };

  const handleDownload = () => {
    const content = `
${type} Document

Name: ${formData.name}
Date: ${formData.date}
Address: ${formData.address}

${content}

Signature: _____________________
    `;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${type.toLowerCase()}-document.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <Dialog open={open} onClose={onClose} maxWidth="md" fullWidth>
      <DialogTitle>Generate {type} Document</DialogTitle>
      <DialogContent>
        <Grid container spacing={2} sx={{ mt: 1 }}>
          <Grid item xs={12}>
            <TextField
              fullWidth
              label="Full Name"
              name="name"
              value={formData.name}
              onChange={handleChange}
            />
          </Grid>
          <Grid item xs={12}>
            <TextField
              fullWidth
              label="Date"
              type="date"
              name="date"
              value={formData.date}
              onChange={handleChange}
            />
          </Grid>
          <Grid item xs={12}>
            <TextField
              fullWidth
              label="Address"
              name="address"
              multiline
              rows={2}
              value={formData.address}
              onChange={handleChange}
            />
          </Grid>
          <Grid item xs={12}>
            <Typography variant="body1" gutterBottom>
              Document Content:
            </Typography>
            <Typography variant="body2" color="text.secondary">
              {content}
            </Typography>
          </Grid>
        </Grid>
      </DialogContent>
      <DialogActions>
        <Button onClick={onClose}>Cancel</Button>
        <Button 
          startIcon={<DownloadIcon />}
          onClick={handleDownload}
          color="primary"
        >
          Download
        </Button>
        <Button 
          startIcon={<PrintIcon />}
          onClick={handlePrint}
          variant="contained"
        >
          Print
        </Button>
      </DialogActions>
    </Dialog>
  );
}

export default DocumentGenerator;